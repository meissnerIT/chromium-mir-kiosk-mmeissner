#!/bin/bash

# Xwayland needs to run as root (bug lp:1767372), so everything has to
if [ "$EUID" -ne 0 ]
    then echo "This needs to run as root"
    exit 2
fi

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1738197 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

wdisplay="wayland-0"
if [ -n "$WAYLAND_DISPLAY" ]; then
    wdisplay="$WAYLAND_DISPLAY"
fi
wayland_sockpath="$XDG_RUNTIME_DIR/../$wdisplay"
wayland_snappath="$XDG_RUNTIME_DIR/$wdisplay"

# Verify accessible Wayland socket - opening it only way to be sure
attempted_open=$(cat "$wayland_sockpath" 2>&1)

if [ -S "$wayland_sockpath" ] && ! [[ $attempted_open = *"Permission denied"* ]]; then
    # if running under wayland, use it
    #export WAYLAND_DEBUG=1
    # create the compat symlink for now
    if [ ! -e "$wayland_snappath" ]; then
        ln -s "$wayland_sockpath" "$wayland_snappath"
    fi
else
    echo "Error: Unable to open a valid Wayland socket!"
    echo ""
    echo "##################################################################################"
    echo "You need to connect this snap to one which implements the 'wayland' plug."
    echo ""
    echo "You can do this with these commands:"
    echo "  snap install mir-kiosk"
    echo "  snap connect $SNAP_NAME:wayland mir-kiosk:wayland"
    echo "##################################################################################"
    exit 1;
fi

# XWayland bringup
# Use new port number in case old server clean up wasn't successful
port=0
while [ -e "/tmp/.X11-unix/X${port}" ]; do
    let port+=1
done

# desktop-helpers not setting this right??
export FONTCONFIG_FILE=${XDG_CONFIG_HOME}/fontconfig/fonts.conf

SNAPPY_PRELOAD=$SNAP \
LD_PRELOAD=$SNAP/lib/libxwayland-preload.so \
    $SNAP/usr/bin/Xwayland -terminate :${port} & pid=$!
trap "trap - SIGTERM && kill $pid" SIGINT SIGTERM EXIT # kill on signal or quit

sleep 1 #FIXME: racey
DISPLAY=:${port} $SNAP/usr/bin/i3 -c $SNAP/etc/i3.config &

_is_json_array() {
    [[ $(echo $1 | jq '.[]' &> /dev/null; echo $?) == 0 ]]
}

# Get URL - can be single url, or JSON-style array of urls. If former, need to
# surround in double-quotes for later use
url="$(snapctl get url)"
if ! _is_json_array $url; then url="\"$url\""; fi

# Time to reset in minutes (float)
reset="$(snapctl get resettime)"
# Show nav bar (true/false)
shownav="$(snapctl get shownav)"
# Hide cursor (true/false)
hidecursor="$(snapctl get hidecursor)"
# Disable kiosk mode (true/false)
disablekiosk="$(snapctl get disablekiosk)"

EXTRA_ARGS=""

if [[ $disablekiosk == "false" ]]; then
  # Configure Chromium to load kiosk extension
  EXTRA_ARGS="--load-and-launch-app=/tmp/kiosk-app --silent-launch"
  # "load-and-launch-app" loads app extension source from a directory, and launches
  # "silent-launch" prevents normal Chromium window opening first

  # Prepare extension - copy from read-only filesystem, and generate settings.js
  cp -R $SNAP/etc/chromium-browser/kiosk-app /tmp
  cat >/tmp/kiosk-app/js/settings.js <<EOL
var kiosk_settings = {
  "url": ${url},
  "reset": ${reset},
  "allowprint": false,
  "shownav": ${shownav},
  "local": false,
  "remote": false,
  "username": "",
  "password": "",
  "restart": false,
  "remoteschedule": false,
  "hidegslidescontrols": true,
  "hidecursor": ${hidecursor},
  "disablecontextmenu": true,
  "disabledrag": true,
  "disabletouchhighlight": true,
  "disableselection": true,
  "resetcache": false,
  "partition": false,
  "allownewwindow": false,
  "screensavertime": 0,
  "screensaverURL": "",
  "clearcookiesreset": true,
  "whitelist": "",
  "useragent": "",
  "authorization": "",
  "multipleurlmode": "",
  "rotaterate": "",
}
EOL
fi

# Chromium bringup
DISPLAY=:${port} "$SNAP/usr/lib/chromium-browser/chromium-browser" \
        --no-default-browser-check \
        --no-first-run \
        --noerrdialogs \
        --disable-restore-session-state \
        --disable-infobars \
        --disable-java \
        --disable-translate \
        --disable-suggestions-service \
        --disable-save-password-bubble \
        --no-sandbox \
        --disable-gpu-sandbox \
        --dbus-stub \
        --enable-logging=stderr \
        --password-store=basic \
        --ignore-gpu-blacklist --enable-native-gpu-memory-buffers \
        --class=chromium \
        --profile-directory=Default $EXTRA_ARGS
        # Cannot run as root and be sandboxed at the same time, but then need
        # to hide the "warning sandboxing disabled" banner
        # kiosk-printing disables printing entirely
